load ../qwhile.maude

--- test `buildGate`
red buildGate(I, v('q1), (v('q1) -> 1)) == I(1) .
red buildGate(X, v('q1), (v('q1) -> 1)) == X(1) .
red buildGate(Y, v('q1), (v('q1) -> 1)) == Y(1) .
red buildGate(Z, v('q1), (v('q1) -> 1)) == Z(1) .
red buildGate(H, v('q1), (v('q1) -> 1)) == H(1) .
red buildGate(S, v('q1), (v('q1) -> 1)) == S(1) .
red buildGate(T, v('q1), (v('q1) -> 1)) == T(1) .
red buildGate(CX, (v('q1), v('q2)), ((v('q1) -> 1) (v('q2) -> 2))) == CX(1, 2) .
red buildGate(CY, (v('q1), v('q2)), ((v('q1) -> 1) (v('q2) -> 2))) == CY(1, 2) .
red buildGate(CZ, (v('q1), v('q2)), ((v('q1) -> 1) (v('q2) -> 2))) == CZ(1, 2) .
red buildGate(SWAP, (v('q1), v('q2)), ((v('q1) -> 1) (v('q2) -> 2))) == SWAP(1, 2) .
red buildGate(CCX, (v('q1), v('q2), v('q3)), ((v('q1) -> 1) (v('q2) -> 2) (v('q3) -> 3))) == CCX(1, 2, 3) .
red buildGate(CCZ, (v('q1), v('q2), v('q3)), ((v('q1) -> 1) (v('q2) -> 2) (v('q3) -> 3))) == CCZ(1, 2, 3) .
red buildGate(CSWAP, (v('q1), v('q2), v('q3)), ((v('q1) -> 1) (v('q2) -> 2) (v('q3) -> 3))) == CSWAP(1, 2, 3) .

--- test `buildProj`
red buildProj(0, v('q1), (v('q1) -> 1)) == P0(1) .
red buildProj(1, v('q1), (v('q1) -> 1)) == P1(1) .

--- test some toy examples
rewrite in QWHILE-SEMANTICS : < v('q1) := X[v('q1)] ; v('q1) := H[v('q1)], |0>, (v('q1) -> 0) > .

search [5] in QWHILE-SEMANTICS :
< v('q1) := X[v('q1)] ; v('q1) := H[v('q1)] ; while M[v('q1)] = 1 do v('q1) := H[v('q1)] od, |0>, (v('q1) -> 0) > 
=>* < emp, V:Vect, E:Env > .