==========================================
reduce in TELEPORT : < prog,qs,env > .
result Config: < v('q2) := H[v('q2)] ; (v('q2),v('q3)) := CX[v('q2),v('q3)] ; (
    v('q1),v('q2)) := CX[v('q1),v('q2)] ; v('q1) := H[v('q1)] ; if M[v('q2)] =
    1 then v('q3) := X[v('q3)] else skip fi ; if M[v('q1)] = 1 then v('q3) :=
    Z[v('q3)] else skip fi,a . |0>(x)|0>(x)|0> + b . |1>(x)|0>(x)|0>,(v('q1) ->
    0) (v('q2) -> 1) v('q3) -> 2 >
==========================================
search in TELEPORT : < prog,qs,env > =>! < emp,V:Vect,E:Env > .

V:Vect --> (a .* 1/2) . |0>(x)|0>(x)|0> + (b .* 1/2) . |0>(x)|0>(x)|1>
E:Env --> (v('q1) -> 0) (v('q2) -> 1) v('q3) -> 2

V:Vect --> (a .* 1/2) . |1>(x)|0>(x)|0> + (b .* 1/2) . |1>(x)|0>(x)|1>
E:Env --> (v('q1) -> 0) (v('q2) -> 1) v('q3) -> 2

V:Vect --> (a .* 1/2) . |0>(x)|1>(x)|0> + (b .* 1/2) . |0>(x)|1>(x)|1>
E:Env --> (v('q1) -> 0) (v('q2) -> 1) v('q3) -> 2

V:Vect --> (a .* 1/2) . |1>(x)|1>(x)|0> + (b .* 1/2) . |1>(x)|1>(x)|1>
E:Env --> (v('q1) -> 0) (v('q2) -> 1) v('q3) -> 2

No more solutions.
==========================================
reduce in TELEPORT : || (a .* 1/2) . |0>(x)|0>(x)|0> + (b .* 1/2) . |0>(x)|0>(
    x)|1> ||^2 .
result PosRat: 1/4
==========================================
reduce in TELEPORT : || (a .* 1/2) . |1>(x)|0>(x)|0> + (b .* 1/2) . |1>(x)|0>(
    x)|1> ||^2 .
result PosRat: 1/4
==========================================
reduce in TELEPORT : || (a .* 1/2) . |0>(x)|1>(x)|0> + (b .* 1/2) . |0>(x)|1>(
    x)|1> ||^2 .
result PosRat: 1/4
==========================================
reduce in TELEPORT : || (a .* 1/2) . |1>(x)|1>(x)|0> + (b .* 1/2) . |1>(x)|1>(
    x)|1> ||^2 .
result PosRat: 1/4
Bye.
